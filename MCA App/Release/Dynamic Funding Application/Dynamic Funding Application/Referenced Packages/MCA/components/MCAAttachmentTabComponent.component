<apex:component controller="McaApp.MCAAttachmentTabController" allowDML="true">
 
 <apex:form id="records" styleClass="records">
 <apex:includeScript value="../../soap/ajax/26.0/connection.js" />
     <style>
         #filedrag {
                 width: 90%;
                 height:25px;
                 padding: 1.145em;
                 margin: 0 auto;
                 margin-bottom:14px;
                 border: 1px grey;
                 border-style: solid;
                 color:black;
                 font:weight:bold;
                 font-size:14px;
                 border-color: grey !important;
                 //border-radius:20px;
                 background-color:white;
                }
                #preview {
                  display: none;
                  margin: 1.125em auto;
                  border: 1px solid pink;
                }
                #loading{
                color:#32B2DB;
                }
     </style>
     
     <style>
        #filedrag.hover
        {
        color: #f00;
        border-color: #f00;
        border-style: solid;
        box-shadow: inset 0 3px 4px #888;
        }
        #fileslist
        {
        overflow: auto;
        height: 150px;
        font-weight: normal;
        color:#32B2DB;
        }
     </style>
    
    <script type="text/javascipt">
        function Reload(){
            console.debug('enter111');
            window.location.href=window.location.href;
        }
     </script>
    
    <c:MCAJQTabComponent />
    <apex:variable var="objId" value="{!opportunity.Id}"/>
        <apex:actionFunction name="collectDataBase64" reRender="Op" status="loadingPanel" oncomplete="computeAttachmentCalculations()">
<!--             <apex:param name="data" id="data" value="" /> -->
<!--             <apex:param name="name" id="name" value="" /> -->
        </apex:actionFunction>
        <div id="filedrag">
        <div id="idle">
        Drop file here for upload...
        </div>
        <div id="loading" class="upload">Uploading...
<!--        <apex:image value="/img/loading.gif" width="18" /> Uploading... -->
        </div>
        <div id="fileslist"></div>
    </div>
    
<!--    <div id="loading" class="loadingPanel"> -->
<!--        <apex:image value="/img/loading.gif" width="18" styleClass="loadingPanelImage"/> Uploading... -->
<!--    </div> -->
     <apex:pageBlock id="Op">
       <script>
        t$( document ).ready(function() {
            computeAttachmentCalculations();
        });
            
        var attachmentTabLabelOriginal ;
        function runSaveAllAttachment() {

          setTimeout(function() {
            saveAllAttachments();
          }, 500);
        }
        t$(function () {
            attachmentTabLabelOriginal = t$("[id*='attachmenttab_lbl']").text();
            computeAttachmentCalculations();
        });
        function attachFile(){
            window.open('/p/attach/NoteAttach?pid={!opportunity.Id}&parentname={!opportunity.Name}&retURL=%2F{!opportunity.Id}','_blank');
        }
        function computeAttachmentCalculations() {
            console.log('-----tab label component1----'+t$("[id*='attachmenttab_lbl']").text());
                var AttachmentTabLabel = 'Attachments'+' ';//+ ' (' + {!containers.size} + ')';
                t$("[id*='attachmenttab_lbl']").text(AttachmentTabLabel);
               
                t$("[id*='attachmenttab_lbl']").append('(' + {!containers.size} + ')');
        }
        function submissionWizard()
        {
              window.open('/apex/SubmissionWizard?id={!opportunity.Id}&accId={!opportunity.AccountId}');
        }
    </script>
     <apex:actionFunction action="{!saveAllAttachments}" name="saveAllAttachments" rerender="records,refreshComponent" status="loadingPanel" oncomplete="computeAttachmentCalculations()"/>
        <apex:pageBlockButtons >
             <apex:CommandButton action="{!refresh}" onclick="attachFile()" value="Attach File" rerender="records,refreshComponent" immediate="true" status="loadingPanel" oncomplete="computeAttachmentCalculations()"></apex:CommandButton>
             <apex:CommandButton action="{!editAll}" value="Edit All" rerender="records,refreshComponent" status="loadingPanel"></apex:CommandButton>
             <apex:CommandButton action="{!saveAllAttachments}" onclick="runSaveAllAttachment()" value="Save" oncomplete="computeAttachmentCalculations()" rerender="records,refreshComponent"></apex:CommandButton>
             <apex:CommandButton action="{!refresh}" value="Cancel" rerender="records,refreshComponent" immediate="true" status="loadingPanel" oncomplete="computeAttachmentCalculations()"></apex:CommandButton>
             <apex:commandButton action="{!refresh}" value="Submit to Banks" styleClass="btnCss" onclick="submissionWizard()" />
        </apex:pageBlockButtons>
        
        <apex:pageBlockSection columns="1" title="Attachments ({!containers.size})" collapsible="false">
        <apex:pageBlockTable value="{!containers}" var="container" styleClass="tablesorting tablesorter" headerClass="header">
          <apex:inlineEditSupport event="ondblclick" />

          <apex:column >
            <apex:outputLink value="/servlet/servlet.FileDownload?file={!container.attachment.Id}" target="blank" rendered="{!NOT(ISBLANK(container.attachment.Id))}"> View </apex:outputLink>
<!--             <a href="/servlet/servlet.FileDownload?file={!container.attachment.Id}" download="{!container.attachment.name}">View</a>   -->
            <apex:outputLabel value="| " rendered="{!NOT(ISBLANK(container.attachment.Id))}"/>
            <apex:commandLink action="{!deleteAttachment}" value="Del" rerender="records,refreshComponent" rendered="{!NOT(ISBLANK(container.attachment.Id))}" status="loadingPanel" immediate="true" oncomplete="computeAttachmentCalculations()">
              <apex:param name="recordToDelete" value="{!container.attachment.Id}" assignTo="{!recordToDelete}" ></apex:param>
            </apex:commandLink>
          </apex:column>

          <apex:column headerValue="Title">
            <apex:outputField value="{!container.attachment.Name}" rendered="{!AND(NOT(ISBLANK(container.attachment.Id)), NOT(editAll))}"/>
            <apex:inputField value="{!container.attachment.Name}" rendered="{!OR((ISBLANK(container.attachment.Id)), editAll)}"/>
          </apex:column>
          
          <apex:column headerValue="{!$ObjectType.attachment.Fields.Description.Label}">
                 <apex:outputField value="{!container.attachment.Description}" rendered="{!AND(NOT(ISBLANK(container.attachment.Id)), NOT(editAll))}"/>
                 <apex:inputField value="{!container.attachment.Description}" rendered="{!OR((ISBLANK(container.attachment.Id)), editAll)}"/>
          </apex:column>

          <apex:column ><apex:facet name="header">Size</apex:facet>
                 <apex:outputLabel >{!container.sizeKB} KB</apex:outputLabel>
          </apex:column>
          
          <apex:column headerValue="{!$ObjectType.attachment.Fields.IsPrivate.Label}">
            <apex:outputField value="{!container.attachment.IsPrivate}" rendered="{!AND(NOT(ISBLANK(container.attachment.Id)), NOT(editAll))}"/>
            <apex:inputField value="{!container.attachment.IsPrivate}" rendered="{!OR((ISBLANK(container.attachment.Id)), editAll)}"/>
          </apex:column>
          
          <apex:column headerValue="Last Modified">
            <apex:outputField value="{!container.attachment.SystemModstamp}" rendered="{!AND(NOT(ISBLANK(container.attachment.Id)), NOT(editAll))}"/>
            <apex:inputField value="{!container.attachment.SystemModstamp}" rendered="{!OR((ISBLANK(container.attachment.Id)), editAll)}"/>
          </apex:column>
          <apex:column headerValue="Uploaded">
            <apex:outputField value="{!container.attachment.CreatedDate}" rendered="{!AND(NOT(ISBLANK(container.attachment.Id)), NOT(editAll))}"/>
            <apex:inputField value="{!container.attachment.CreatedDate}" rendered="{!OR((ISBLANK(container.attachment.Id)), editAll)}"/>
          </apex:column>
        </apex:pageBlockTable>
      </apex:pageBlockSection>
     </apex:pageBlock>
    
 <script>
        var SUPPORT_MULTI_FILE = true;
        var newHt = 25;
        
        j$ = jQuery.noConflict();
        // prepare the form when the DOM is ready
        j$(document).ready(function() {
        // call initialization file
        if (window.File && window.FileList && window.FileReader) {
        Init();
        }
        });
        
        function reloadParent() {
            //window.top.location.reload(true);
            window.top.location.href = '/'+'{!objId}';
        }
        //
        // initialize
        function Init() {
        var filedrag = j$("#filedrag");
        j$('#loading').hide();
        j$('#idle').show();
        filedrag.bind("dragover", FileDragHover);
        filedrag.bind("dragleave", FileDragHover);
        filedrag.bind("drop", FileSelectHandler);
        filedrag.css("display","block");
        }
        //used to show the user informations about the upload
        var filesToUpload = new Array();
        // file drag hover
        function FileDragHover(e) {
        e.stopPropagation();
        e.preventDefault();
        e.target.className = (e.type == "dragover" ? "hover" : "");
        }
        // file selection
        function FileSelectHandler(e) {
        newHt = 25;
        j$("#filedrag").css("height", newHt);
        filesToUpload = new Array();
        //LOCK THE DRAG/DROP
        filedrag = j$("#filedrag");
        filedrag.unbind("dragover",FileDragHover);
        filedrag.unbind("dragleave",FileDragHover);
        filedrag.unbind("drop",FileSelectHandler);
        // cancel event and hover styling
        FileDragHover(e);
        if(e.originalEvent.dataTransfer){
        if(e.originalEvent.dataTransfer.files.length) {
        e.preventDefault();
        e.stopPropagation();
        for (var i = 0, f; f = e.originalEvent.dataTransfer.files[i]; i++) {
        console.log('--f---'+f);
        //check file dimensions/types
        ParseFile(f);
        UploadFile(f);
        j$('#loading').show();
        j$('#idle').hide();
        //lock multi file uplod
        if(SUPPORT_MULTI_FILE == false) break;
        }
        checkIfCompleted();
        }
        }
        }
        //utility object to track the uploading of all files
        function uploadingFile(file, status)
        {
        this.file = file;
        this.status = status;
        }
        function ParseFile(file) {
        //console.debug(file);
        filesToUpload.push(new uploadingFile(file,'Uploading...'));
        console.log('----filesToUpload----'+filesToUpload);
        
        j$("#filedrag").css("height", newHt);
        newHt += 20;
        }
        function checkIfCompleted()
        {
        //check if all files have been unploaded
        var output = j$('#fileslist');
        var allUploaded = true;
        output.html('');
        for(var i = 0; i < filesToUpload.length; i++)
        {
        output.html(output.html()+'<b>'+filesToUpload[i].file.name+'</b> ['+(filesToUpload[i].file.size/1024).toFixed(1)+' KB]'+' : '+filesToUpload[i].status+'<br/>');
        if(filesToUpload[i].status == 'Uploading...') allUploaded &= false;
        }
        if(allUploaded){
         Init();
         //window.top.location.reload(true);
         //reloadParent();
         collectDataBase64();
         computeAttachmentCalculations();
         }
        }
        // upload JPEG files
        function UploadFile(file) {
        var reader = new FileReader();
        // Closure to capture the file information.
        reader.onload = function(e) {
        var fup = null;
        var Attachment  = new sforce.SObject("Attachment");
         Attachment.Name = file.name;
         Attachment.Body=String(e.target.result.split(',')[1]);
         Attachment.ParentId = '{!objId}';
         // Assign all medotery fields for the Attachment record
         var result = sforce.connection.create([Attachment]);
         console.log('---result---'+result);
         var fup = null;
         for(var i = 0; i < filesToUpload.length; i++)
         {
            if(file === filesToUpload[i].file)
            {
                fup = filesToUpload[i];
            }
         }
         if(result[0].getBoolean("success")){
            console.log('---if---');
            fup.status = 'Upload completed.';
         }
         else{
            console.log('---else---');
            fup.status = 'Error occurred. Try later. '+result[0].get("errors").statusCode;
         }
         checkIfCompleted();
         };
         reader.readAsDataURL(file);
        }
        
    </script>
    </apex:form>
</apex:component>