<apex:component controller="GRIDLoanBalanceController" allowDML="true">

    <apex:form id="LoanBalanceform" styleClass="records">
        <apex:outputPanel id="loanBalTable">
        <apex:pageBlock mode="inlineEdit">
            <apex:pageBlockButtons location="top">
                <input type="button" onclick="runNewLoanBalance()" class="btn" value="New LoanBalance" status="loadingPanel"/>
                <apex:CommandButton action="{!editAllLoanBalances}" value="Edit All" rerender="loanBalTable" status="loadingPanel"/>
                <input type="button" onclick="runSaveLoanBalances()" class="btn" value="Save" status="loadingPanel" />
                <apex:CommandButton action="{!refreshLoanBalances}" value="Refresh" rerender="loanBalTable" status="loadingPanel" immediate="true"/>
                <apex:CommandButton action="{!refreshLoanBalances}" value="Cancel" rerender="loanBalTable" status="loadingPanel" immediate="true"/>
            </apex:pageBlockButtons>
            
                <apex:pageMessages id="loanBalpgMsgId" escape="false" />
                <table  class="list" border="0" cellpadding="0" cellspacing="0">
                    <tbody>
                        <tr class="headerRow">
                            <th>Record</th>
                            <th>Action</th>
                            <apex:repeat value="{!loanBalFieldsetList}" var="loanBalField">
                            <th>
                                <div>
                                    <apex:outputLabel value="{!loanBalField.label}"/>
                                    <apex:OutputPanel rendered="{!AND(loanBalField.type != 'textarea', loanBalField.type != 'picklist', loanBalField.type != 'multipicklist')}"> 
                                        <img src="{!IF(loanBalSortExpression==loanBalField.fieldPath,IF(loanBalSortDirection=='ASC',$Resource.sortImageAsc,$Resource.sortImageDesc),$Resource.SortImagesBoth)}" style="height:11px;" name ="{!loanBalField.fieldPath}" class="sorting" onclick="sortCallLoanBalances('{!loanBalField.type}');" />
                                    </apex:OutputPanel>
                                </div>
                            </th>
                            </apex:repeat>
                        </tr>
                        <apex:repeat value="{!loanBalWrapperLst}" var="loanBalWraper" >
                        <tr class="dataRow">
                            <td>
                                <apex:outputtext value="{!loanBalWraper.loanBalIndex + 1}"/>
                            </td>
                            <td>
                                <apex:outputLink value="/{!loanBalWraper.LoanBal.Id}" target="blank" rendered="{!NOT(ISBLANK(loanBalWraper.LoanBal.Id))}"> View </apex:outputLink>
                                <apex:outputLabel value="| " rendered="{!NOT(ISBLANK(loanBalWraper.loanBal.Id))}"/>
                                <apex:commandLink action="{!deleteLoanBalance}" value="Del" rerender="loanBalTable" rendered="{!NOT(ISBLANK(loanBalWraper.loanBal.Id))}" status="loadingPanel">
                                    <apex:param name="loanBalIndexToRemove" value="{!loanBalWraper.loanBalIndex}" assignTo="{!loanBalIndexToRemove}"></apex:param>
                                </apex:commandLink>
                            <apex:commandLink action="{!deleteLoanBalance}" value="Remove" rerender="loanBalTable" rendered="{!(ISBLANK(loanBalWraper.LoanBal.Id))}"  styleClass="removeRow" status="loadingPanel">
                                <apex:param name="loanBalIndexToRemove" value="{!loanBalWraper.loanBalIndex}" assignTo="{!loanBalIndexToRemove}"></apex:param>
                            </apex:commandLink>
                       </td>
                            <apex:repeat value="{!loanBalFieldsetList}" var="loanBalfield">
                                <td>
                                    <apex:outputField value="{!loanBalWraper.loanBal[loanBalfield]}" rendered="{!AND(IF(loanBalWraper.loanBalEdit = false, true, false),NOT(ISBLANK(loanBalWraper.loanBal.Id)))}" />
                                    <apex:inputField value="{!loanBalWraper.loanBal[loanBalfield]}" rendered="{!OR(IF(loanBalWraper.loanBalEdit = true, true, false),ISBLANK(loanBalWraper.loanBal.Id))}"/>
                                </td>
                            </apex:repeat>
                        </tr>
                        </apex:repeat>
                    </tbody>
                    <tfoot>
                        <tr class ="headerRow">
                            <td><b>Total</b></td>
                            <td></td>
                            <apex:repeat value="{!loanBalFieldsetList}" var="loanBalfield">
                                <td>
                                    <apex:outputText value="{!loanBalFieldToSumMap[loanBalfield.fieldPath]}" rendered="{!loanBalFieldToSumMap[loanBalfield.fieldPath] != 100}" />
                                </td>
                            </apex:repeat>
                        </tr>
                    </tfoot>
                </table>
                <br />
                showing records {!IF((loanBalOffsetsize + 1) > loanBalRecordCount, IF(loanBalRecordCount - loanBalBlockSize <= 0, 0, loanBalRecordCount - loanBalBlockSize), loanBalOffsetsize + 1)} - {!IF(loanBalBlockSize + loanBalOffsetsize <= loanBalRecordCount, loanBalBlockSize + loanBalOffsetsize, loanBalRecordCount)} Of {!loanBalRecordCount}
                
                <!-- panel grid for pagination buttons -->
                    <apex:pageblockButtons >
                        <apex:commandButton style="left:75px;position:relative;" value="<<" 
                                            rerender="loanBalTable" action="{!beginningLoanBalances}" status="loadingPanel" disabled="{!IF(loanBalOffsetsize == 0, true, false)}"/>
                        <apex:commandButton style="left:95px;position:relative;" value="<" 
                                            rerender="loanBalTable" action="{!previousLoanBalances}"  status="loadingPanel" disabled="{!IF(loanBalOffsetsize == 0, true, false)}"/>
                        <apex:commandButton style="left:115px;position:relative;" value = ">" 
                                            rerender="loanBalTable" action="{!nextLoanBalances}" status="loadingPanel" disabled ="{!IF(loanBalBlockSize + loanBalOffsetsize >= loanBalRecordCount, true, false)}" />
                        <apex:commandButton style="left:135px;position:relative;" value = ">>" 
                                            rerender="loanBalTable" action="{!endLoanBalances}" status="loadingPanel" disabled ="{!IF(loanBalBlockSize + loanBalOffsetsize >= loanBalRecordCount, true, false)}"/>
                    </apex:pageblockButtons>
        </apex:pageBlock>
        </apex:outputPanel>
        <apex:actionFunction action="{!newLoanBalance}" name="newLoanBalance" rerender="loanBalTable" status="loadingPanel"/>
        <apex:actionFunction action="{!saveLoanBalances}" name="saveLoanBalances" rerender="loanBalTable" status="loadingPanel"/>
        <apex:actionFunction action="{!sortLoanBalances}" name="sortAllLoanBalances" rerender="loanBalTable" status="loadingPanel" >
            <apex:param name="loanBalTypeParam" value="" /> 
        </apex:actionFunction>
        
        <apex:inputHidden value="{!loanBalSortExpression}" id="loanBalSortHiddencriterian"/>
        <apex:inputHidden value="{!loanBalSortDirection}" id="loanBalSortHiddenOrder"/>
        
    </apex:form>

    <script>
        function runNewLoanBalance() 
        {
            setTimeout(function() 
            {               
                newLoanBalance();
            }, 200);
        }
        
        function runSaveLoanBalances() 
        {
            setTimeout(function() 
            {               
                saveLoanBalances();
            }, 200);
        }
        
        function sortCallLoanBalances(loanBalFieldDataType)
        {
            /*
              event.target will have the DOM structure on which the event is fired.So here salesforce automically will
              pick up native html id of the selector
            */
                
                 var loanBalElement= event.target;
                 
                 var newloanBalSortCol = t$(loanBalElement).attr("Name"); // new sort field
                 var oldloanBalSortCol = t$("input[id$='loanBalSortHiddencriterian']").val();
                 console.log(oldloanBalSortCol);
                 
               if(String(newloanBalSortCol) == String(oldloanBalSortCol))
                {
                    
                    if(String(t$("input[id$='loanBalSortHiddenOrder']").val()) == "ASC")
                    {
                      t$("input[id$='loanBalSortHiddenOrder']").val("DESC");
                      t$(loanBalElement).removeClass('SortAsc').addClass('SortDesc');
                    }
                    else
                    {
                      t$("input[id$='loanBalSortHiddenOrder']").val("ASC");
                      t$(loanBalElement).removeClass('SortDesc').addClass('SortAsc');
                    }
                    
                    t$("input[id$='loanBalSortHiddencriterian']").val(newloanBalSortCol);
                   
                    sortAllLoanBalances(loanBalFieldDataType);
                
                }
                else
                {
                    t$("input[id$='loanBalSortHiddencriterian']").val(newloanBalSortCol);
                    t$("input[id$='loanBalSortHiddenOrder']").val("ASC");
                    t$(loanBalElement).removeClass('sorting').addClass('SortAsc');
                    sortAllLoanBalances(loanBalFieldDataType);
                }
        }
        
    </script>
</apex:component>